var JThread = java.lang.Thread;
var JThreadLocal = java.lang.ThreadLocal;

function EventLoop() {
  this.events = [];
}

EventLoop.prototype.queue = function(future, callback) {
  this.events.push({future: future, callback: callback});
};

EventLoop.prototype.run = function() {
  var events = this.events;
  while(events.length > 0) {
    for(var i = 0; i < events.length; i++) {
      if(events[i].future.isDone()) {
        events[i].callback(events[i].future.get());
        events.splice(i, 1);
        i--;
      }
    }
    java.lang.Thread.sleep(10);
  }
};

EventLoop.prototype.toString = function() {
  return "Event loop with: " + this.events.length + " events in queue.";
};

exports.EventLoop = EventLoop;
var threadLoop = new JavaAdapter(JThreadLocal, {initialValue: function() { return new EventLoop(); }});

exports.queue = function(future, callback) {
  threadLoop.get().queue(future, callback);
};

exports.run = function() {
  threadLoop.get().run();
};
