Patch Object: (Composed of many Different Revision Objects)
	patch_id
	patch_name
	patch_revision (equivalent to git tag?)
	patch_contents
	category
	icon
	webos_versions []
		version_number
	device []
		device_name
	screenshots []
		url
		device?			#Do we want to be able to sort screenshots by device
		webos?			#What about by webos version?
		date?				#Do we want to record when the sc is added?
	maintainers []
		name
		email
	modified_files []?	#Do we want to be able to sort by modified files either now or down the line?  
		filename
	comments []	#Instead of just having one space for an admin comment, it makes sense to at least have the flexibility to have multiple comments
		from
		message
		public
	equivilant_to [] #Lets two different patch revisions show up as one in the patch view (So -9 and -10 would be shown as a single version, useful for submitting slightly different patch's for different devices/webos versions)
		revision
	change_log [] #Array of changes to the Revision between this one and the last one
		date
		change
	submission []			#object holding submission information including date, user info, status, and message
		name		#If user is logged in, it is set to that
		show_email
		email		#If user is logged in, it is set to that
		user		#if user is logged in and has this preference set, it is set to that
		status	#Status of the submission.  Can be Accepted, Denied, or Pending
		message	#Optional reason that the patch was denied, if it was denied
	
	
Clean Patch Object: (Built From Revision Objects.)
	patch_id	#Patch ID
	patch_name	#Patch Name
	patch_revision_id {}	#The Revision ID plus equivalent Revision ID's
	patch_revisions []		#By Default, only returns the last 10 revisions
		revision {}				#Revision informational object
			revision_id				#Revision ID 
			equivalent[]			#Array of Equivalent Revision ID's
			date					#Date Revision Approved		
	patch_contents			#Not Given By Default
	patch_category			#Patch Category
	patch_icon				#Patch Icon (If any, else if there is a category icon use that, else use a stock icon)
	patch_webos []			#By Default, only contains the 5 most recent webos Versions
		webOS_version {}
			version
			revisions []
	patch_device []			#By Default, only contains the 5 most recent Device's
		device {}
			device
			revisions []
	patch_screenshots []	#By Default, only contains the screenshots from the most recent revision(s)
		screenshot {}
			url
			revisions []
	patch_maintainers []	#By Default, only contains the maintainers from the most recent revision(s)
		maintainer {}
			name
			email
			revisions []
	patch_modified_files []	#By Default, only contains the modified files from the most recent revision(s)
		file {}
			path
			revisions []
	patch_comments  []		#By Default, only contains the comments from the most recent revision(s)
		comment {}
			from
			message
			public
	patch_equivalent []		#By Default, only contains an array of equivilant revision info from the most recent revision(s)
	patch_change_log  []	#By Default, only contains the change log from the most recent revision(s)
		change {}
			date
			subject
			content
	patch_submission []		#By Default, only contains the submission info from the most recent revision(s)
		submission {}
			name
			user
			email
			show_email
			status
			message
	
	
	
	
User Object:
	username
	full_name
	email
	password
	salt
	reg_date
	last_log_in
	permissions
		id
		value
		
Permissions Object
	id
	Name
	
Pages:
	Patch
		index
		browse
		single_patch
		single_revision
		update
		comment
	User
		register
		sign_in
		update
		sign_out
	Admin
		pending_list
		user_list
		user_update
		
		
	All single string data entries will default to using a dropdown box, while all arrays will default to using checkbox's.  However, there will be an array of valid fields to allow searching by (at least via the searchbar) in order to not clog up the system (since searching by something like screenshots makes no sense at all)
	There are data entries for modified files that will eventually be used to create a list of compatible patch's (and will be a special case for the searchbar, where there can be multiple "Compatible With" entries with a value chosen by dropdown)
	
	Mockups:
		Mockups of the pages are located in the mockup directory of the git repo.
		
		
		
		
	UI Elements:		#Here is a list of the different UI elements and what data params is needed for each one
		Global:
		Header:
			Page Title
			Nav Links:
				title
				link
				active
				first
				class
			User Links:
				title
				link
				active
				first
				class
				
				
				
				
				
			Sidebar:
				SearchBar:
					SingleSelect:
						field
						options:
							name
							value
							selected
					MultiSelect:
						field
						options:
							name
							value
							selected
					Proposed Patches:
						patches
							title
							category
							date
					Recent Patches:
						patches
							title
							category
							date